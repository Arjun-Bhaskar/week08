name: Backend Pipeline

on:
  push:
    branches: [ develop, main ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        ports: ['5432:5432']
        env:
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      # Set up Python
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Install backend dependencies for order_service
      - name: Install order_service dependencies
        run: |
          python -m venv backend/order_service/venv
          source backend/order_service/venv/bin/activate
          pip install -r backend/order_service/requirements.txt

      # Install backend dependencies for product_service
      - name: Install product_service dependencies
        run: |
          python -m venv backend/product_service/venv
          source backend/product_service/venv/bin/activate
          pip install -r backend/product_service/requirements.txt

      # Run tests for order_service
      - name: Test order_service
        run: |
          source backend/order_service/venv/bin/activate
          pytest backend/order_service/tests

      # Run tests for product_service
      - name: Test product_service
        run: |
          source backend/product_service/venv/bin/activate
          pytest backend/product_service/tests

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURE_CONTAINER_REGISTRY }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      - run: |
          IMAGE_TAG=staging-${{ github.sha }}
          if [[ $GITHUB_REF == "refs/heads/main" ]]; then
            IMAGE_TAG=prod-${{ github.sha }}
          fi
          docker build -t ${{ secrets.AZURE_CONTAINER_REGISTRY }}.azurecr.io/backend:$IMAGE_TAG ./backend
          docker push ${{ secrets.AZURE_CONTAINER_REGISTRY }}.azurecr.io/backend:$IMAGE_TAG

  deploy-staging:
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ secrets.STAGING_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.STAGING_AKS_CLUSTER }}
      - run: |
          kubectl apply -f k8s/staging/

  deploy-production:
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://myapp-prod.example.com
    steps:
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ secrets.PRODUCTION_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.PRODUCTION_AKS_CLUSTER }}
      - run: |
          kubectl apply -f k8s/production/
